const fs = require('fs');
const path = require('path');

const petsFilePath = path.join(__dirname, '../database/pets.json');
const coinBalancesPath = path.join(__dirname, '../database/coin_balances');
const battleLogsPath = path.join(__dirname, '../database/battle_logs');
const winLossRecordPath = path.join(__dirname, '../database/win_loss_record.json');
const challengePath = path.join(__dirname, '../database/challenge.json');

function loadPets() {
    if (fs.existsSync(petsFilePath)) {
        return JSON.parse(fs.readFileSync(petsFilePath, 'utf8'));
    }
    return {};
}

function savePets(pets) {
    fs.writeFileSync(petsFilePath, JSON.stringify(pets, null, 2));
}

function loadCoinBalance(userId) {
    const coinBalanceFile = path.join(coinBalancesPath, `${userId}.json`);
    if (fs.existsSync(coinBalanceFile)) {
        return JSON.parse(fs.readFileSync(coinBalanceFile, 'utf8'));
    }
    return 0;
}

function saveCoinBalance(userId, balance) {
    const coinBalanceFile = path.join(coinBalancesPath, `${userId}.json`);
    fs.writeFileSync(coinBalanceFile, JSON.stringify(balance));
}

function loadWinLossRecord() {
    if (fs.existsSync(winLossRecordPath)) {
        return JSON.parse(fs.readFileSync(winLossRecordPath, 'utf8'));
    }
    return {};
}

function saveWinLossRecord(record) {
    fs.writeFileSync(winLossRecordPath, JSON.stringify(record, null, 2));
}

function loadChallenge() {
    if (fs.existsSync(challengePath)) {
        return JSON.parse(fs.readFileSync(challengePath, 'utf8'));
    }
    return {};
}

function saveChallenge(challenge) {
    fs.writeFileSync(challengePath, JSON.stringify(challenge, null, 2));
}

function getRandomNumber(min, max) {
    return Math.floor(Math.random() * (max - min + 1)) + min;
}

function applySkillEffect(attacker, defender) {
    const weaknesses = {
        fire: 'water',
        ice: 'fire',
        water: 'grass',
        grass: 'ice'
    };
    let additionalDamage = 0;
    let skillEffect = '';
    if (weaknesses[attacker.skill] === defender.skill) {
        additionalDamage = Math.floor(Math.random() * (1000 - 500 + 1)) + 500;
        //skill
        skillEffect = 'super effective';
    } else if (attacker.skill === 'ice' && Math.random() < 0.5) {
        skillEffect = 'frozen';
    } else if (attacker.skill === 'fire' && Math.random() < 0.5) {
        skillEffect = 'burn';
    } else if (attacker.skill === 'water' && Math.random() < 0.5) {
        skillEffect = 'waterPistol';
    } else if (attacker.skill === 'grass') {
        skillEffect = 'heal';
    }
    return { additionalDamage, skillEffect };
}

function battleRound(attacker, defender, multiplier = 1.2) {
    const { additionalDamage, skillEffect } = applySkillEffect(attacker, defender);
    const defenseChance = Math.random(); // Random chance to block damage based on defense
    const damageMultiplier = multiplier;
    const totalDamage = (attacker.attack + additionalDamage) * damageMultiplier - (defenseChance < 0.3 ? defender.defense : 0);
    defender.hp -= totalDamage;
    if (attacker.skill === 'grass' && skillEffect === 'heal') {
        attacker.hp += attacker.attack * 0.4; // Heal the attacker by 10% of the damage dealt
    }
    return {
        totalDamage,
        skillEffect,
        defenderHP: defender.hp
    };
}
function updatePetStats(pet) {
    pet.attack = Math.min(pet.attack + 3, 2000);
    pet.hp = Math.min(pet.hp + 10, 10000);
    pet.defense = Math.min(pet.defense + 3, 1500);
    pet.exp += getRandomNumber(15, 20);
}

function updatePetStats2(pet) {
    pet.attack = Math.min(pet.attack + 1, 2000);
    pet.hp = Math.min(pet.hp + 5, 10000);
    pet.defense = Math.min(pet.defense + 1, 1500);
    pet.exp += getRandomNumber(5, 15);
}

function awardCoins(userId, amount) {
    let balance = loadCoinBalance(userId);
    balance += amount;
    saveCoinBalance(userId, balance);
    return amount;
}

function updateWinLossRecord(winnerId, loserId) {
    const record = loadWinLossRecord();
    if (!record[winnerId]) {
        record[winnerId] = { wins: 0, losses: 0 };
    }
    if (!record[loserId]) {
        record[loserId] = { wins: 0, losses: 0 };
    }
    record[winnerId].wins += 1;
    record[loserId].losses += 1;
    saveWinLossRecord(record);
}

function startBattle(api, event, userPet, opponentPet, betAmount) {
    const battleLogsPath = path.join(__dirname, '../database/battle_logs');
    if (!fs.existsSync(battleLogsPath)) {
        fs.mkdirSync(battleLogsPath);
    }
//tryy
    userPet.hp = Math.min(userPet.exp * 10, 10000);
        opponentPet.hp = Math.min(opponentPet.exp * 10, 10000);
        
    let battleLog = [];
    let frozen = false;

    for (let round = 1; round <= 3; round++) {
        if (!frozen) {
            const userAttack = battleRound(userPet, opponentPet, 1.5);
            let userAttackMessage = `Round ${round}: ${userPet.name} deals ${userAttack.totalDamage.toFixed(2)} damage to ${opponentPet.name}. (${userAttack.skillEffect})`;
            if (userAttack.skillEffect === 'burn') {
                userAttackMessage += ` ${opponentPet.name} is burned!`;
            }
            else if (userAttack.skillEffect === 'waterPistol') {
                userAttackMessage += ` ${userPet.name} uses Water Pistol, dealing additional damage!`;
            }
            //
              if (userAttack.skillEffect === 'heal') {
                userAttackMessage += ` ${userPet.name} get Lifesteal`;
            }
            //battleLog.push(userAttackMessage);
            if (userAttack.skillEffect === 'frozen') {
                frozen = true;
                userAttackMessage += ` ${opponentPet.name} is frozed!`;
            }
            battleLog.push(userAttackMessage);
        }

        if (opponentPet.hp <= 0) {
            break;
        }

        if (!frozen) {
            const opponentAttack = battleRound(opponentPet, userPet, 1.5);
            let opponentAttackMessage = `Round ${round}: ${opponentPet.name} deals ${opponentAttack.totalDamage.toFixed(2)} damage to ${userPet.name}. (${opponentAttack.skillEffect})`;
            if (opponentAttack.skillEffect === 'burn') {
                opponentAttackMessage += ` ${userPet.name} is burned!`;
            } else if (opponentAttack.skillEffect === 'waterPistol') {
                opponentAttackMessage += ` ${opponentPet.name} uses Water Pistol, dealing additional damage!`;
            }
            if (opponentAttack.skillEffect === 'heal') {
                opponentAttackMessage += ` ${opponentPet.name} get lifesteal!`;
            }
            //battleLog.push(opponentAttackMessage);
            if (opponentAttack.skillEffect === 'frozen') {
                frozen = true;
                //yawa
                opponentAttackMessage += ` ${userPet.name} is frozed!`;
            }
            battleLog.push(opponentAttackMessage);
        }

        if (userPet.hp <= 0) {
            break;
        }

        frozen = false; // Reset frozen status for the next round
    }

    let winner;
    if (userPet.hp <= 0 && opponentPet.hp <= 0) {
        battleLog.push('It\'s a draw!');
    } else if (userPet.hp <= 0) {
        winner = opponentPet;
        updatePetStats(opponentPet);
        updateWinLossRecord(opponentPet.owner, userPet.owner);
    } else if (opponentPet.hp <= 0) {
        winner = userPet;
        updatePetStats(userPet);
        updateWinLossRecord(userPet.owner, opponentPet.owner);
    } else if (userPet.hp > opponentPet.hp) {
        winner = userPet;
        updatePetStats(userPet);
        updatePetStats2(opponentPet);
        updateWinLossRecord(userPet.owner, opponentPet.owner);
    } else {
        winner = opponentPet;
        updatePetStats(opponentPet);
        updatePetStats2(userPet);
        updateWinLossRecord(opponentPet.owner, userPet.owner);
    }

    if (winner) {
        const coinsAwarded = awardCoins(winner.owner, betAmount * 2); // Winner gets double the bet amount
        battleLog.push(`${winner.emoji} ⛏️ ${winner === userPet ? opponentPet.emoji : userPet.emoji}`);
        battleLog.push(`${winner.name} has slain ${winner === userPet ? opponentPet.name : userPet.name}!`);
        battleLog.push(`${winner.name} earned ${coinsAwarded} coins and gained experience!`);
        battleLog.push(`${winner.name} - Exp: ${winner.exp}, Attack: ${winner.attack}, HP: ${winner.hp}, Defense: ${winner.defense}`);
    }

    savePets(loadPets());

    // Save battle log to file
    const battleLogFilePath = path.join(battleLogsPath, `battle_log_${Date.now()}.txt`);
    fs.writeFileSync(battleLogFilePath, battleLog.join('\n'), 'utf8');

    const sendBattleLogMessage = () => {
        api.sendMessage({
            body: 'Battle log:',
            attachment: fs.createReadStream(battleLogFilePath)
        }, event.threadID, () => {
            // Remove the file after sending
            fs.unlinkSync(battleLogFilePath);
        });
    };

    // Send each message with a 3-second delay
    let messageIndex = 0;
    const sendMessages = () => {
        if (messageIndex < battleLog.length) {
            api.sendMessage(battleLog[messageIndex], event.threadID, () => {
                messageIndex++;
                setTimeout(sendMessages, 3000);
            });
        } else {
            // Send the full battle log as an attachment at the end
            setTimeout(sendBattleLogMessage, 2000);
        }
    };

    sendMessages();
}

module.exports = {
    name: 'challenge',
    description: 'Challenge another user to a pet battle with a bet amount.',
    role: 'user',
    cooldown: 0,
    credits: 'YAFB',
    execute(api, event, args) {
    const userId = event.senderID;
    const pets = loadPets();

    if (!pets[userId]) {
        api.sendMessage('You do not have a pet to challenge with. Use the "pet" command to create one.', event.threadID, event.messageID);
        return;
    }

    const challengeData = loadChallenge();

    if (args.length === 0) {
        if (challengeData[userId] && challengeData[userId].betAmount) {
            api.sendMessage(`You have started a challenge with a bet amount of ${challengeData[userId].betAmount} coins. Waiting for an opponent to accept...`, event.threadID, event.messageID);
        } else {
            api.sendMessage('Usage:\n- challenge start <betAmount>\n- challenge accept\n\nStart a challenge or accept an existing one.', event.threadID, event.messageID);
        }
        return;
    }

    const command = args[0].toLowerCase();

    if (command === 'start') {
        const betAmount = parseInt(args[1]);
        if (isNaN(betAmount) || betAmount <= 0) {
            api.sendMessage('Please enter a valid bet amount.', event.threadID, event.messageID);
            return;
        }

        let coinBalance = loadCoinBalance(userId);
        if (coinBalance < betAmount) {
            api.sendMessage(`You do not have enough coins to bet ${betAmount} coins.`, event.threadID, event.messageID);
            return;
        }

        // Deduct the bet amount from the user's balance
        coinBalance -= betAmount;
        saveCoinBalance(userId, coinBalance);

        challengeData[userId] = {
            betAmount: betAmount,
            timestamp: Date.now()
        };
        saveChallenge(challengeData);

        api.sendMessage(`${pets[userId].emoji} ${pets[userId].name} is challenging you for ${betAmount} coins! Type "challenge accept" to accept the challenge.`, event.threadID, event.messageID);

        // Set a timer to clear the challenge after 40 seconds if no one accepts
        setTimeout(() => {
            const currentChallengeData = loadChallenge();
            if (currentChallengeData[userId] && currentChallengeData[userId].timestamp === challengeData[userId].timestamp) {
                // Calculate the amount to be refunded with a 5% deduction
                const refundAmount = betAmount * 0.95;

                // Refund the amount
                let updatedCoinBalance = loadCoinBalance(userId);
                updatedCoinBalance += refundAmount;
                saveCoinBalance(userId, updatedCoinBalance);

                // Delete the challenge
                delete currentChallengeData[userId];
                saveChallenge(currentChallengeData);

                api.sendMessage(`The challenge has expired due to no response. ${betAmount * 0.05} coins have been deducted as a fee, and ${refundAmount} coins have been refunded to you.`, event.threadID, event.messageID);
            }
        }, 40000);

    } else if (command === 'accept') {
        const opponentId = Object.keys(challengeData).find(id => challengeData[id].betAmount);
        if (!opponentId) {
            api.sendMessage('There are no active challenges to accept.', event.threadID, event.messageID);
            return;
        }

        if (opponentId === userId) {
            api.sendMessage('You cannot accept your own challenge.', event.threadID, event.messageID);
            return;
        }

        if (!pets[opponentId]) {
            api.sendMessage('The challenger does not have a pet.', event.threadID, event.messageID);
            return;
        }

        let coinBalance = loadCoinBalance(userId);
        const betAmount = challengeData[opponentId].betAmount;
        if (coinBalance < betAmount) {
            api.sendMessage(`You do not have enough coins to accept the challenge of ${betAmount} coins.`, event.threadID, event.messageID);
            return;
        }

        // Deduct the bet amount from the acceptor's balance
        coinBalance -= betAmount;
        saveCoinBalance(userId, coinBalance);

        api.sendMessage(`${pets[userId].emoji} ${pets[userId].name} has accepted the challenge from ${pets[opponentId].emoji} ${pets[opponentId].name} for ${betAmount} coins!`, event.threadID, event.messageID);

        setTimeout(() => {
            startBattle(api, event, pets[userId], pets[opponentId], betAmount);
        }, 3000);

        // Remove the challenge after it's accepted
        delete challengeData[opponentId];
        saveChallenge(challengeData);

    } else {
        api.sendMessage('Invalid command. Use "challenge start <betAmount>" to start a challenge or "challenge accept" to accept a challenge.', event.threadID, event.messageID);
    }
}
};